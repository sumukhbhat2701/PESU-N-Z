%{
    #include <stdio.h>
    #include <stdlib.h>
    int yylex();
    void yyerror(char *s);
	extern int lineNumber;
	extern char* yytext;
	extern FILE *yyin;
	int errCount = 0; 
%}

%start START

%token INT FLOAT CHAR DOUBLE VOID LONG FOR DO MAIN WHILE IF ELSE PRINTF  INCLUDE NL NUM ID DOT RETURN ADD SUBTRACT DIVIDE MULTIPLY LE GE EQ NE NOT GT LT  INC DEC OR AND LEFTPARENTHESIS RIGHTPARENTHESIS LEFTBRACKET RIGHTBRACKET LEFTBRACES RIGHTBRACES COMMA SEMICOLON ASSIGN REFERENCE INTEGERCONSTANT FLOATCONSTANT CHARCONSTANT STRING

%right NOT INC DEC
%left AND OR
%left '*' '/'
%left '+' '-'
%left LE GE LT GT
%left NE
%left ANDAND
%left OROR
%right '='
%%

START: PROGRAM | SEMICOLON;

PROGRAM: INCLUDE PROGRAM 
	| MAINFUNCTION PROGRAM 
	| ASSIGNMENT SEMICOLON PROGRAM 
	| DNA SEMICOLON PROGRAM 
	| error SEMICOLON {yyerrok;} STATEMENTN
	| SEMICOLON
	|
	;

DNA: TYPE DNA1;

DNA1: DNA1 COMMA COMBINED 
	| COMBINED;

COMBINED: ASSIGNMENT 
	| ID1 UNARY 
	| UNARY ID1
	| ID1;

VARLIST: VARLIST COMMA ID1 
	| ID1 ;

ID1: ID ARRAYSIZE;

ARRAYSIZE: LEFTBRACES INTEGERCONSTANT RIGHTBRACES ARRAYSIZE | ;

TYPE: INT 
	| FLOAT 
	| CHAR 
	| DOUBLE 
	| LONG;

ASSIGNMENT: ID1 ASSIGN EXPRESSION ;

EXPRESSION: EXPRESSION RELOP E 
		| E  ;

RELOP: LT 
		| GT 
		| LE 
		| GE 
		| EQ 
		| NE;

E: E ADD T 
		| E SUBTRACT T 
		| T  ;

T: T MULTIPLY F 
		| T DIVIDE F 
		| F  ;

F: LEFTPARENTHESIS EXPRESSION RIGHTPARENTHESIS 
		| ID 
		| NUM 
		| SIGN CONSTANT 
		| STRING;

SIGN: ADD 
		| SUBTRACT 
		|  ;

CONSTANT: INTEGERCONSTANT 
		| FLOATCONSTANT 
		| CHARCONSTANT;

MAINFUNCTION: TYPE MAIN LEFTPARENTHESIS VARLIST1 RIGHTPARENTHESIS LEFTBRACKET STATEMENTN RIGHTBRACKET;

VARLIST1: VARLIST 
		| ;

STATEMENTN: STATEMENT1 STATEMENTN 
		| BLOCK STATEMENTN 
		| ;

STATEMENT1: ASSIGNMENT SEMICOLON
		| IF LEFTPARENTHESIS Condition RIGHTPARENTHESIS STATEMENTN 
		| IF LEFTPARENTHESIS Condition RIGHTPARENTHESIS STATEMENTN ELSE STATEMENTN 
		| WHILE1 
		| RETURN CONSTANT SEMICOLON 
		| FOR1 
		| PRINTF LEFTPARENTHESIS STRING RIGHTPARENTHESIS SEMICOLON 
		| DOWHILE 
		| DNA SEMICOLON 
		| COMBINED SEMICOLON 
		| error SEMICOLON { yyerrok;} STATEMENTN;

DOWHILE: DO LEFTBRACKET STATEMENTN RIGHTBRACKET WHILE LEFTPARENTHESIS Condition RIGHTPARENTHESIS SEMICOLON;

FOR1: FOR LEFTPARENTHESIS FOR3 SEMICOLON Condition SEMICOLON FOR2 RIGHTPARENTHESIS FOR4;

FOR2: FOR2 COMMA ID UNARY 
		| FOR2 COMMA UNARY ID
		| FOR2 COMMA ASSIGNMENT 
		| UNARY ID 
		| ID UNARY
		| ASSIGNMENT 
		| ; 

FOR3: TYPE DNA1 
		| DNA1;

FOR4: LEFTBRACKET STATEMENTN RIGHTBRACKET 
		| ;

BLOCK: LEFTBRACKET STATEMENTN RIGHTBRACKET;

WHILE1: WHILE LEFTPARENTHESIS Condition RIGHTPARENTHESIS WHILE2;

Condition: NOTE EXPRESSION 
		| Condition AND Condition 
		| Condition OR Condition 
		| LEFTPARENTHESIS Condition RIGHTPARENTHESIS;

NOTE: NOT 
		| ;

WHILE2: LEFTBRACKET STATEMENTN RIGHTBRACKET 
		| ;

UNARY: INC 
		| DEC ;

%%

void yyerror(char *s)
{
	errCount++;
	printf("Error: %s, line number: %d, token: %s\n", s, lineNumber, yytext);
}
int main(int argc, char *argv[])
{
	yyin = fopen(argv[1], "r");
	yyparse();
	if(errCount > 0)
	{
		printf("Compilation failed at Syntax Analyser with a total of %d errors\n", errCount);	
	}
	else
	{
		printf("Compilation successful w.r.t. Syntax Analyser\n");
	}
	fclose(yyin);
	return 0;
}
